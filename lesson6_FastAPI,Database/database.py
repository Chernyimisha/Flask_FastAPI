# SQLite ‚Äî —ç—Ç–æ –æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–º–∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞
# –æ—Å–Ω–æ–≤–µ SQL.
# –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–º –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
# –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É ORM (Object-Relational Mapping), —Ç–∞–∫—É—é –∫–∞–∫
# Tortoise ORM, SQLAlchemy –∏–ª–∏ Peewee.
# üî• –í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤—ã –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ SQLAlchemy –∏ databases —Ä–∞–Ω—å—à–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
# pip install sqlalchemy
# pip install databases[aiosqlite]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
# –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –∑–º–µ–Ω–∏—Ç—å SQLite –Ω–∞ PostgreSQL, –¥–æ—Å—Ç–æ—Ç–æ—á–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤
# –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:
# DATABASE_URL = "postgresql://user:password@localhost/dbname"
# –£–∫–∞–∑–∞–≤ —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–∞—Ä–æ–ª—å, —Ö–æ—Å—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å –Ω–µ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.


import databases
import sqlalchemy
from fastapi import FastAPI
from pydantic import BaseModel, Field
from typing import List
import uvicorn


DATABASE_URL = "sqlite:///mydatabase.db"
database = databases.Database(DATABASE_URL)
metadata = sqlalchemy.MetaData()

users = sqlalchemy.Table(
    "users",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer, primary_key=True),
    sqlalchemy.Column("name", sqlalchemy.String(32)),
    sqlalchemy.Column("email", sqlalchemy.String(128)),
)

# –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é SQLite —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º
# —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–º—É –ø–æ—Ç–æ–∫—É, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
# –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∑–∞–ø—Ä–æ—Å. –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ
# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—â–µ–π (–¥–ª—è
# —Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤). –ù–æ –≤ FastAPI –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –æ–±—ã—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (def)
# –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏
# —Ç–æ–≥–æ –∂–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å SQLite, —á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω
# —Ä–∞–∑—Ä–µ—à–∞—Ç—å —ç—Ç–æ —Å –ø–æ–º–æ—â—å—é connect_args={"check_same_thread": False}.
# –î–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä connect_args –Ω–µ –Ω—É–∂–µ–Ω!

engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={"check_same_thread": False})

# engine = sqlalchemy.create_engine(DATABASE_URL)
metadata.create_all(engine)
app = FastAPI()


@app.on_event("startup")
async def startup():
    await database.connect()


@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()


class UserIn(BaseModel):
    name: str = Field(max_length=32)
    email: str = Field(max_length=128)


class User(BaseModel):
    id: int
    name: str = Field(max_length=32)
    email: str = Field(max_length=128)

# –ü—Ä–µ–∂–¥–µ —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º API –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤—Å—é —Ü–µ–ø–æ—á–∫—É CRUD –¥–ª—è
# –∫–ª–∏–µ–Ω—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.


@app.get("/fake_users/{count}")
async def create_note(count: int):
    for i in range(count):
        query = users.insert().values(name=f'user{i}', email=f'mail{i}@mail.ru')
        await database.execute(query)
    return {'message': f'{count} fake users create'}


@app.post("/users/", response_model=User)
async def create_user(user: UserIn):
    query = users.insert().values(name=user.name, email=user.email)
    last_record_id = await database.execute(query)
    return {**user.dict(), "id": last_record_id}


@app.get("/users/", response_model=List[User])
async def read_users():
    query = users.select()
    return await database.fetch_all(query)


@app.get("/users/{user_id}", response_model=User)
async def read_user(user_id: int):
    query = users.select().where(users.c.id == user_id)
    return await database.fetch_one(query)


@app.put("/users/{user_id}", response_model=User)
async def update_user(user_id: int, new_user: UserIn):
    query = users.update().where(users.c.id == user_id).values(**new_user.dict())
    await database.execute(query)
    return {**new_user.dict(), "id": user_id}


@app.delete("/users/{user_id}")
async def delete_user(user_id: int):
    query = users.delete().where(users.c.id == user_id)
    await database.execute(query)
    return {'message': 'User deleted'}

# curl -X 'POST' 'http://127.0.0.1:8000/users/' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{
# "name": "Alex", "email": "my@mail.ru"}'

# –°–æ–∑–¥–∞–Ω–∏–µ API –æ–ø–µ—Ä–∞—Ü–∏–π CRUD –≤ FastAPI - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å. –ú—ã –º–æ–∂–µ–º
# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–µ—Ç–æ–¥—ã Python –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
# —Å–æ–∑–¥–∞–Ω–∏—è, —á—Ç–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ú—ã –º–æ–∂–µ–º
# –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à API —Å –ø–æ–º–æ—â—å—é —Ç–∞–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–∞–∫ Postman –∏–ª–∏ Swagger
# UI, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.

if __name__ == "__main__":
    uvicorn.run("database:app", host="127.0.0.1", port=8000, reload=True)

